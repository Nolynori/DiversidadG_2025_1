---
title: "Population genetics"
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    self-contained: true
editor_options: 
  chunk_output_type: console
execute: 
  warning: false
  echo: true
---

# Project Setup

```{r}
#| label:  setup

source("https://inkaverse.com/docs.r")

cran <- c("devtools", "poppr", "vcfR", "ape", "RColorBrewer")
git <- c("hemstrow/snpR") 

suppressPackageStartupMessages({
  for (pkg in cran) { 
    if( !require(pkg, character.only = TRUE) ) {
      install.packages(pkg)
      library(pkg, character.only = TRUE)
    } 
  }
  
  for (pkg in git) {
    if( !require(sub(".*/", "", pkg), character.only = TRUE) ) {
      devtools::install_github(pkg, upgrade = TRUE)
      library(sub(".*/", "", pkg), character.only = TRUE)
    }
  }
}); remove(cran, git, pkg)

cat("Project: ", getwd(), "\n")
session_info()
```

# References

- https://grunwaldlab.github.io/poppr/index.html
- https://grunwaldlab.github.io/Population_Genetics_in_R/index.html
- https://grunwaldlab.github.io/Population_Genetics_in_R/gbs_analysis.html
- https://github.com/hemstrow/snpR
- https://www.nature.com/articles/s41437-022-00535-z
- https://github.com/hemstrow/snpR/blob/master/vignettes/snpR_introduction.Rmd

# Poppr 

Poppr is an R package designed for analysis of populations with mixed modes of sexual and clonal reproduction. 

> There are several stand-alone programs that can handle these types of data sets, but they are often platform specific and often only accept specific data types. Furthermore, a typical analysis often involves switching between many programs, and converting data to each specific format.

Poppr allows analysis of haploid and diploid dominant/co-dominant marker data including microsatellites, Single Nucleotide Polymorphisms (SNP), and Amplified Fragment Length Polymorphisms (AFLP). 

# Caso de estudio

Data set of 94 samples of the red raspberry pathogen Phytophthora rubi (Tabima et al., 2018). This pathogen is diploid and a fungal like Oomycete. Populations were obtained by sampling individual pathogen strains from roots of infected red raspberry in the states of California (CA), Oregon (OR), and Washington (WA). A total of 94 samples of P. rubi were sequenced using the Illumina HiSeq 3000 technology with 150 bp paired end reads and a target insert size of 500 bp.

## Import data

```{r}
rubiVCF <- read.vcfR("prubi_gbs.vcf.gz")
rubiVCF

popdata <- read.table("https://grunwaldlab.github.io/Population_Genetics_in_R/population_data.gbs.txt", sep = "\t", header = TRUE)

all(colnames(rubiVCF@gt)[-1] == popdata$AccessID)

glrubi <- vcfR2genlight(rubiVCF) # data set into an object that is usable by poppr
```

The vcfR2genlight function subsets the data to filter loci that are not bi-allelic, returning an object that contains only loci with two alleles.

We are required to specify the ploidy of the organism in order to calculate some population genetic metrics. P. rubi is a diploid organism, so we will specify a ploidy of two.

```{r}
ploidy(glrubi) <- 2
```

Our biological question requires predetermined populations. We can add them to the genlight object as part of the pop (population) slot. In order to specify the population, we added the State column from our pop.data data frame to the pop slot of our genlight object:

```{r}
pop(glrubi) <- popdata$State
glrubi
```

# Population genetic analyses

When samples are very similar, they are grouped by short branches. The longer the branch, the higher the number of substitutions and the higher the genetic distance is between samples or clusters.

For this tutorial, we will build a distance tree to obtain an initial assessment of the population structure of the P. rubi samples in the western US. We will reconstruct a distance tree based on the UPGMA algorithm, with 100 bootstrap replicates to assess branch support:

```{r}
tree <- aboot(glrubi
               , tree = "upgma"
               , distance = bitwise.dist
               , sample = 100
               , showtree = F, cutoff = 50, quiet = T)
```

## Distance tree

```{r}
cols <- brewer.pal(n = nPop(glrubi), name = "Dark2")
plot.phylo(tree, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(glrubi)])
nodelabels(tree$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.8,font = 3, xpd = TRUE)
#legend(35,10,c("CA","OR","WA"),cols, border = FALSE, bty = "n")
legend('topleft', legend = c("CA","OR","WA"), fill = cols, border = FALSE, bty = "n", cex = 1)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different)")
```

## PCA

```{r}
rubi.pca <- glPca(glrubi, nf = 3)

rubi.pca.scores <- as.data.frame(rubi.pca$scores)
rubi.pca.scores$pop <- pop(glrubi)

plot <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2, colour=pop)) + 
  geom_point(size=2) +
  stat_ellipse(level = 0.95, size = 1) +
  scale_color_manual(values = cols)+ 
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = 0) +
  theme_bw()
plot
```

## DAPC

The DAPC is a multivariate statistical approach that uses populations defined a priori to maximize the variance among populations in the sample by partitioning it into between-population and within-population components. DAPC thus maximizes the discrimination between groups. 

```{r}
pnw.dapc <- dapc(glrubi, n.pca = 3, n.da = 2)

compoplot(pnw.dapc,col = cols, posi = 'top')
```

# snpR

```{r}
glrubi <- snpR::convert_vcfR("prubi_gbs.vcf.gz")
glrubi

popdata <- read.table("https://grunwaldlab.github.io/Population_Genetics_in_R/population_data.gbs.txt", sep = "\t", header = TRUE)

sample.meta(glrubi)$pop <- popdata$State

sample.meta(glrubi)
snp.meta(glrubi)
```

## Statistics

```{r}
glrubi <- calc_basic_snp_stats(x = glrubi
                               , facets = "pop"
                               , sigma = 200
                               , step = 50
                               , par = 8
                               )

snpR::plot_pairwise_fst_heatmap(glrubi, facets = "pop")

get.snpR.stats(glrubi, "pop", stats = "single")
```

## PCA

```{r}
plot <- plot_clusters(glrubi, facets = c("pop"))
plot
```

## Genetic distance

```{r}
gd <- snpR::calc_genetic_distances(glrubi, facets = c("sampID"), method = "Edwards")
dat <- get.snpR.stats(gd, facets = "sampID", stats = "genetic_distance")
heatmap(as.matrix(dat$sampID$.base$Edwards))
```

## Population structure

```{r}
snpR::plot_structure(glrubi, facet = c("pop"), k = 2:10
                     , clumpp = FALSE, method = "snapclust")

snpR::plot_structure(glrubi, facet = c("pop"), k = c(5))
```

